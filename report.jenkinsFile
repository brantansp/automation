jobName      = env.JOB_NAME
notification = "good"
jobStatus    = 0
test_cycle= params.TEST_CYCLE
client_filter= params.CLIENT_FILTER

image = "669650451927.dkr.ecr.ap-south-1.amazonaws.com/pando-fitnesse:c96"

node('automation_label') { //Node where autoscaling occur

 sh '$(aws ecr get-login --no-include-email --region ap-south-1)' //login to image
 
 try {

       docker.image(image).inside('--privileged') {
       
          stage('Checkout') {
               checkout([$class: 'GitSCM', branches: [[name: params.BRANCH]], doGenerateSubmoduleConfigurations: false,
                         extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '30a3a50f-826d-4349-bfb9-e3b9208ac50e',url: 'https://github.com/pandocorp/automation.git']]])
           }
           
           stage('Data Settings') {
		       sh  """#!/bin/bash
					cd  workflow/FitNesseRoot/GlobalSettings
					rpl build_no_x  ${env.BUILD_NUMBER} CommonVariables.wiki
					rpl build_job_x ${env.JOB_NAME} CommonVariables.wiki
					rpl reportTestCyclexxx ${env.TEST_CYCLE} CommonVariables.wiki
					rpl reportClientFilterxxx ${env.CLIENT_FILTER} CommonVariables.wiki
			   """
          } 

          stage('Build') {

			 sh 'sudo -- sh -c "echo tmpfs      /dev/shm      tmpfs   defaults,size=2g   0   0  >> /etc/fstab"'
             sh 'sudo mount -o remount /dev/shm'
             sh 'df -k | grep shm'

             sh  """#!/bin/bash
					cd  commonlibrary
					mvn -Dmaven.javadoc.skip=true install
			 """

			 sh  """#!/bin/bash
					cd  workflow
					rm -rf er/report.html
			 """
          }

          stage('Test') {
        	    testcase = params.TESTCASE
				sh """#!/bin/bash
				   cd workflow
				   mvn -Dmaven.javadoc.skip=true -Pfitnesse test -Dfitnesse.command='-c $testcase?suite&format=xml&includehtml' -Dfitnesse.result='fitnesse-data-result.xml'
				"""
		 }
		  
		 stage("Saving Test result") {
		       sh """#!/bin/bash
		          df=\$(date +"%d%m%y")
				  aws s3 cp workflow/er/ s3://b4a112d42948772cf082d/${env.JOB_NAME}/\$df/${env.BUILD_NUMBER}/ --recursive  --exclude "*" --include "report*" --exclude "*/*"
               """
		}
     }
   } catch (e) {
          echo 'Issue ' + e
          currentBuild.result = 'FAILED'
          notification = "danger"
          sh 'exit 1'
      } finally {
      
          stage('Publish Reports') {
               step([$class: 'FitnesseResultsRecorder',fitnessePathToXmlResultsIn: 'workflow/fitnesse-data-result.xml'])
              
               if(currentBuild.result == 'UNSTABLE') {
	             notification = "warning"
	           }

	           if(!jobName.contains("Phase") && notification !='good') {
	               slackSend color:"$notification", channel: "#automation-status", message: "Automation Completed - ${env.JOB_NAME} (<${env.BUILD_URL}|Open>)"
	           }
	           
	           publishHTML([allowMissing: true,alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'workflow/er', reportFiles: 'report.html', reportName: 'Consolidated report'])

	           def now = new Date()

			   manager.createSummary("http://ci.gopando.co/static/243b2051/images/48x48/search.png").appendText("<a href='https://s3.console.aws.amazon.com/s3/buckets/b4a112d42948772cf082d/${env.JOB_NAME}/"+now.format("yyMMdd")+"/${env.BUILD_NUMBER}/' target='blank'>Consolidated report in S3</a>", false)
	      }
      }
}
